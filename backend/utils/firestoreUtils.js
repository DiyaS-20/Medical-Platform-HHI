const db = require('../firebase');

/**
 * Add a document to a specified Firestore collection.
 * @param {string} collectionName - The name of the Firestore collection.
 * @param {string} docId - The document ID (optional; autogenerated if not provided).
 * @param {Object} data - The data to store in the document.
 * @returns {Object} - Success or error message.
 */
const addDocument = async (collectionName, docId = null, data) => {
  try {
    if (docId) {
      await db.collection(collectionName).doc(docId).set(data);
    } else {
      await db.collection(collectionName).add(data);
    }
    return { success: true, message: 'Document added successfully' };
  } catch (error) {
    console.error('Error adding document:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Get a document by ID from a Firestore collection.
 * @param {string} collectionName - The name of the Firestore collection.
 * @param {string} docId - The document ID.
 * @returns {Object} - The document data or an error message.
 */
const getDocumentById = async (collectionName, docId) => {
  try {
    const doc = await db.collection(collectionName).doc(docId).get();
    if (!doc.exists) {
      return { success: false, message: 'Document not found' };
    }
    return { success: true, data: doc.data() };
  } catch (error) {
    console.error('Error fetching document:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Update a document by ID in a Firestore collection.
 * @param {string} collectionName - The name of the Firestore collection.
 * @param {string} docId - The document ID.
 * @param {Object} data - The data to update in the document.
 * @returns {Object} - Success or error message.
 */
const updateDocument = async (collectionName, docId, data) => {
  try {
    await db.collection(collectionName).doc(docId).update(data);
    return { success: true, message: 'Document updated successfully' };
  } catch (error) {
    console.error('Error updating document:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Delete a document by ID from a Firestore collection.
 * @param {string} collectionName - The name of the Firestore collection.
 * @param {string} docId - The document ID.
 * @returns {Object} - Success or error message.
 */
const deleteDocument = async (collectionName, docId) => {
  try {
    await db.collection(collectionName).doc(docId).delete();
    return { success: true, message: 'Document deleted successfully' };
  } catch (error) {
    console.error('Error deleting document:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Fetch all documents from a Firestore collection.
 * @param {string} collectionName - The name of the Firestore collection.
 * @returns {Object} - An array of documents or an error message.
 */
const getAllDocuments = async (collectionName) => {
  try {
    const snapshot = await db.collection(collectionName).get();
    const documents = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    return { success: true, data: documents };
  } catch (error) {
    console.error('Error fetching documents:', error);
    return { success: false, error: error.message };
  }
};

module.exports = {
  addDocument,
  getDocumentById,
  updateDocument,
  deleteDocument,
  getAllDocuments,
};
